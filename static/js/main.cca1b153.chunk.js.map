{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Header.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","cardComponent","robots","map","robot","i","components_Card","key","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","console","log","children","Component","Header","nextProps","nextState","Scroll","style","overflowY","border","height","SearchBox","searchChange","aria-label","type","placeholder","onChange","App","onFetchRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","fetchRobots","dispatch","event","payload","target","value","fetch","then","res","json","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","react_redux_es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cca1b153.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=300x300`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n  const cardComponent = robots.map((robot, i) => {\n    return (\n      <Card\n        key={robot.id}\n        id={robot.id}\n        name={robot.name}\n        email={robot.email}\n      />\n    );\n  });\n  return (\n    <div>\n      {cardComponent}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\n\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true});\n    console.log(error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h2>Oops, something went wrong!</h2>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>;\n    } \n}\n\nexport default Header;\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search robots...'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport { setSearchField, fetchRobots } from '../actions';\n\nimport './App.css';\n\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.fetchRobots.robots,\n    isPending: state.fetchRobots.isPending,\n    error: state.fetchRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onFetchRobots: () => dispatch(fetchRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED\n} from './constants';\n\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const fetchRobots = () => (dispatch) => {\n  dispatch({ type: FETCH_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((res) => res.json())\n    .then((robots) => dispatch({ type: FETCH_ROBOTS_SUCCESS, payload: robots }))\n    .catch((error) => dispatch({ type: FETCH_ROBOTS_FAILED, payload: error }));\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED';\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED\n} from './constants';\n\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const fetchRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case FETCH_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case FETCH_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n}\n","import 'tachyons';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, fetchRobots } from './reducers';\n\nimport './index.css';\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, fetchRobots })\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}